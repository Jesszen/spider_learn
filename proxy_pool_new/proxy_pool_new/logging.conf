
#coding: utf-8
#logging配置文件

#定义logger模块，root是父类，必须存在，其他的自定义
#logging.getLogger(name) 相当于向loggging模块注册了一种日志打印
#如果name为loggers里面keys的值，则调用对应的配置，如果name没有则调用默认（root)的配置
#name 中用点 . 表示继承关系
#可以有多个，以逗号隔开


#####################################################################################################

[loggers]
keys=root,scheduler,utils,getter,db,test,crawler


#实现logger对应的配置信息
#            必须是 logger_name  name为loggers中key的值
#level       日志级别，级别有 DEBUG,INFO,WARNING,ERROR,CRITICAL
#handlers    日志处理器，可以有多个 以逗号隔开
#qualname    logger的名称，通过logging.getLogger(name)获取，这里的name便是qualname
#            如果获取的logger 名称不存在，则调用默认（root)logger
#propagate   是否继承符类的配置信息，0：否 1：是
#如果这个属性是True也就是1，那么这个logger的输出会朝着上一级logger传播；会产生两个记录
#所以需要把其他logger的propagate属性设置为False

[logger_root]
level=INFO
handlers=file_write
qualname=root


[logger_scheduler]
level=INFO
handlers=stream,file_write
qualname=scheduler
propagate=0
#不向上一级传播
#在这里 如果propagate=1,上传上一级父级，并使用父级的配置
#propagate = 0 表示仅使用自身的配置，我们定义了两个处理器。输出到日志文件，保存到本地

[logger_utils]
level=INFO
handlers=stream,file_write
qualname=utils
propagate=0

[logger_getter]
level=INFO
handlers=stream,file_write
qualname=getter
propagate=0


[logger_db]
level=INFO
handlers=stream,file_write
qualname=db
propagate=0

[logger_test]
level=INFO
handlers=stream,file_write
qualname=test
propagate=0

[logger_crawler]
level=INFO
handlers=stream,file_write
qualname=crawler
propagate=0

#######################################################################

[handlers]
keys=file_write,stream

#handlers的具体配置实现
#必须是 handler_name  name为handlers中key的值
#class为logging包里面的handler处理器
#formatter 日志输入格式
#args handler相关参数

[handler_file_write]
class=logging.handlers.RotatingFileHandler
formatter=pretty
level=INFO
args=('os.path.join(log_path,log_name)','w+' )#元组形式  参数是RotatingFileHandler的__init__()的参数
#  ./是当前目录
#  ../是上一级【父级】目录

[handler_stream]
class=logging.StreamHandler
level=INFO
formatter=pretty
args=(sys.stdout,)#系统控制台输出


##############################################################################

[formatters]
keys=pretty

#日志输出格式化实现
#datefmt 日期格式 对应asctime

[formatter_pretty]
format=%(levelname)s - %(name)s - %(asctime)s - %(module)s.%(funcName)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S